import os
import tempfile
from pathlib import Path
from subprocess import check_call, check_output
from typing import Any, List, Optional, Tuple, Union

from valohai_cli.utils import get_random_string


class StubGit:

    def __init__(self, path: Any):
        if type(path) not in {Path, str}:
            # support for the legacy `_pytest._py.path.LocalPath` generated by the `tmpdir` fixture
            path = str(path)
        if isinstance(path, str):
            path = Path(path)

        path = path.resolve(strict=False)

        # we don't manage the temporary directory lifecycle so expect it to exist
        assert path.exists(), 'stub git root directory path does not exist'

        # a sanity check that we are not potentially mangling some real git repository
        from_env = os.environ.get('PYTEST_DEBUG_TEMPROOT')
        temp_root = Path(from_env or tempfile.gettempdir()).resolve()
        assert temp_root in path.parents, 'stub git not inside temporary directory'

        self.dir_path = path

    @property
    def dir_str(self) -> str:
        # `pathlib.Path` is frequently needed as a classical string
        return str(self.dir_path)

    def init(self):
        check_call('git init', cwd=self.dir_str, shell=True)
        check_call('git config user.name Robot', cwd=self.dir_str, shell=True)
        check_call('git config user.email robot@example.com', cwd=self.dir_str, shell=True)

    def write(
        self,
        path: Union[Path, str],
        *,
        content: Optional[str] = None,
        add: bool = True,
    ):
        if content is None:
            content = get_random_string()

        absolute_path, relative_path = self._pathify(path)
        absolute_path.parent.mkdir(parents=True, exist_ok=True)
        absolute_path.write_text(content, 'utf8')

        if add:
            self.add(relative_path)

    def add(self, path: Union[Path, str]):
        _, relative_path = self._pathify(path)
        check_call(f'git add {relative_path}', cwd=self.dir_str, shell=True)

    def add_all(self):
        check_call('git add .', cwd=self.dir_str, shell=True)

    def commit(self, message: str = 'bugfix'):
        check_call(f'git commit -m "{message}"', cwd=self.dir_str, shell=True)

    def log(self) -> List[str]:
        # full git commit SHAs in reverse chronological order (the latest first)
        raw = check_output('git log --pretty=format:%H', cwd=self.dir_str, shell=True)
        return raw.decode('utf-8').split()

    def _pathify(self, path: Union[Path, str]) -> Tuple[Path, Path]:
        if isinstance(path, str):
            path = Path(path)

        absolute = (self.dir_path / path).resolve()
        return absolute, absolute.relative_to(self.dir_path)
